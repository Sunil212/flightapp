package flightApp;


import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoUnit;

public class Flight {
	private String flightNumber;
	private String airliner;
	
	private String source;
	private LocalDateTime flyDateTime;
	
	private String destination;
	private LocalDateTime arrivalDateTime;
	
	private Hault[] hault; // can be null;
	
	private boolean flyType; // domestic (false) or international(true)
	private int internationFlyTax; 
	
	private int baseFare; // always include 5% as airport surcharge and 30% as fuel cost
	private int finalCost;// based on Airliner calendar and other criteria's 
	
	private double airportSurcharge;
	private double fuelCost;
	private double nonFriendlyTax;
	private double timeTax;
	private double holidayTax;
	
	//--------------------Constructors-----------------------
	
	
	public Flight() {
		super();
	}
	
	
	public Flight(String flightNumber, String airliner, String source, LocalDateTime flyDateTime, String destination,
			LocalDateTime arrivalDateTime, boolean flyType, int internationFlyTax, int baseFare) {
		super();
		this.flightNumber = flightNumber;
		this.airliner = airliner;
		this.source = source;
		this.flyDateTime = flyDateTime;
		this.destination = destination;
		this.arrivalDateTime = arrivalDateTime;
		this.flyType = flyType;
		this.internationFlyTax = internationFlyTax;
		this.baseFare = baseFare;
	}
	
		
	//--------------------Setters and getters----------------------
	

	public String getFlightNumber() {
		return flightNumber;
	}


	public void setFlightNumber(String flightNumber) {
		this.flightNumber = flightNumber;
	}


	public String getAirliner() {
		return airliner;
	}


	public void setAirliner(String airliner) {
		this.airliner = airliner;
	}


	public String getSource() {
		return source;
	}


	public void setSource(String source) {
		this.source = source;
	}


	public LocalDateTime getFlyDateTime() {
		return flyDateTime;
	}


	public void setFlyDateTime(LocalDateTime flyDateTime) {
		this.flyDateTime = flyDateTime;
	}


	public String getDestination() {
		return destination;
	}


	public void setDestination(String destination) {
		this.destination = destination;
	}


	public LocalDateTime getArrivalDateTime() {
		return arrivalDateTime;
	}


	public void setArrivalDateTime(LocalDateTime arrivalDateTime) {
		this.arrivalDateTime = arrivalDateTime;
	}


	public Hault[] getHault() {
		return hault;
	}


	public void setHault(Hault[] hault) {
		this.hault = hault;
	}


	public boolean isFlyType() {
		return flyType;
	}


	public void setFlyType(boolean flyType) {
		this.flyType = flyType;
	}


	public int getInternationFlyTax() {
		return internationFlyTax;
	}


	public void setInternationFlyTax(int internationFlyTax) {
		this.internationFlyTax = internationFlyTax;
	}


	public int getBaseFare() {
		return baseFare;
	}


	public void setBaseFare(int baseFare) {
		this.baseFare = baseFare;
	}


	public int getFinalCost() {
		return finalCost;
	}


	public void setFinalCost(int finalCost) {
		this.finalCost = finalCost;
	}


	public double getAirportSurcharge() {
		return airportSurcharge;
	}


	public void setAirportSurcharge(double airportSurcharge) {
		this.airportSurcharge = airportSurcharge;
	}


	public double getFuelCost() {
		return fuelCost;
	}


	public void setFuelCost(double fuelCost) {
		this.fuelCost = fuelCost;
	}


	public double getNonFriendlyTax() {
		return nonFriendlyTax;
	}


	public void setNonFriendlyTax(double nonFriendlyTax) {
		this.nonFriendlyTax = nonFriendlyTax;
	}


	public double getTimeTax() {
		return timeTax;
	}


	public void setTimeTax(double timeTax) {
		this.timeTax = timeTax;
	}


	public double getHolidayTax() {
		return holidayTax;
	}


	public void setHolidayTax(double holidayTax) {
		this.holidayTax = holidayTax;
	}

	
	//-------------------Business Methods--------------------
	
	public boolean isFriendlyCountry() {
		FriendlyCountry friendlyCountry = new FriendlyCountry();
		for(String country : friendlyCountry.countries) {
			if(country.equals(destination)) return true; 
		}
		return false;
	}
	
	public long checkTime() {
		LocalTime flightArrivalTime = arrivalDateTime.toLocalTime();
		LocalTime noonTime = LocalTime.parse("12:00:00");
		long seconds = ChronoUnit.SECONDS.between(flightArrivalTime,noonTime);
		return seconds; 
	}
	
	
	public double checkHolidaysCalender() {
		LocalDate dateOfArrival = arrivalDateTime.toLocalDate();
		AirlineCalendar calendar = new AirlineCalendar();
		double holidayTaxPercent=0;
		for(LocalDate ld : calendar.listOfHolidays) {
			int dayDifference = (int) ChronoUnit.DAYS.between(dateOfArrival,ld);
			if(dayDifference>=0 && dayDifference<=1){
				holidayTaxPercent = 0.5;
				break;
			}
			else if((dayDifference>=2 && dayDifference <= 10)) {
				holidayTaxPercent = 0.2;
				break;
			}
		}
		return holidayTaxPercent;
	}
	

	public int calculateCost()
	{
		airportSurcharge=0.05*baseFare;
		fuelCost=0.3*baseFare;
		
		boolean isFriendly=isFriendlyCountry();
		if(isFriendly==true) nonFriendlyTax=0;
		else nonFriendlyTax=0.3*baseFare;
		
		long timeDifference=checkTime();
//		System.out.println("============");
//		System.out.println(timeDifference);
		if (timeDifference <= 7200 && timeDifference >= -7200) timeTax=0.1*baseFare;
		else timeTax=0;
		
		holidayTax=baseFare*checkHolidaysCalender();
		
		double totalFare = baseFare +  airportSurcharge + fuelCost + nonFriendlyTax + timeTax + internationFlyTax + holidayTax; 
		finalCost=(int)totalFare;
		
		/*
		 * Cost of the flight will be decided by 
		 * 1. arrival date. :-
		 * 		1.a)  If 10 to 2 days prior to the AirlinerCalendar Date	 :- 20% extra
		 * 		1.b)  If 1 to 0 day prior to the AirlinerCalendar Date 	:-  50% extra	
		 * 2. arrival time.
		 * 		2.a) If flight land time is 2 hr +/- to 12:00 Noon (Any Date)	:- 10% extra
		 * 3. Non free travel countries (List of FriendlyCountry.java)
		 * 		3.a) If destination belongs to non free travel, friendly country :- 30% extra
		 * */
		
		return finalCost;
	}
	

}
